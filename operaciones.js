// Generated by CoffeeScript 2.2.2
var activaSeccion, add_row, adjustment, agregarAFN, cadenaValidaAFNs, cambiarTipoAFN, concatenarAFNs, desactivaItemsMenu, interrogacionAFNs, j, kleenAFNs, len, ocultaSecciones, positivaAFNs, ref, s, unirANFs, validaAFNs,
  indexOf = [].indexOf,
  splice = [].splice;

ocultaSecciones = function() {
  return $('.operacion').addClass('hidden');
};

desactivaItemsMenu = function() {
  return $('a.m-item').removeClass('is-active');
};

activaSeccion = function(nombreSeccion) {
  return $(`a.m-${nombreSeccion}`).on('click', function() {
    ocultaSecciones();
    $(`.${nombreSeccion}.operacion`).removeClass('hidden');
    desactivaItemsMenu();
    return $(this).addClass('is-active');
  });
};

agregarAFN = function() {
  return $('.btn-crear').on('click', function() {
    var maxSimbolo, minSimbolo, rango, sim, simbolo;
    if ($('input.char').is(':checked')) {
      console.log('transción con un simbolo');
      simbolo = $('.input.min-simbolo').val();
      return $('.automatas').append(`<li class="panel-block">\n  <span class="regex">${simbolo}</span>\n</li>`);
    } else {
      console.log('transción con un rango de simbolos');
      [minSimbolo, maxSimbolo] = [$('.input.min-simbolo').val(), $('.input.max-simbolo').val()].map(function(s) {
        return s.charCodeAt();
      });
      rango = ((function() {
        var j, ref, ref1, results;
        results = [];
        for (sim = j = ref = minSimbolo, ref1 = maxSimbolo; (ref <= ref1 ? j <= ref1 : j >= ref1); sim = ref <= ref1 ? ++j : --j) {
          results.push(String.fromCharCode(sim));
        }
        return results;
      })()).join('|');
      return $('.automatas').append(`<li class="panel-block">\n  <span class="regex">${rango}</span>\n</li>`);
    }
  });
};

cambiarTipoAFN = function() {
  return $('.field.tipo-afn').on('change', function() {
    var btn, field, sims;
    if ($('input.rango').is(':checked')) {
      // Transción con un rango de simbolos
      field = $('.field.f-min-simbolo');
      field.removeClass('has-addons');
      btn = $(field).find('.control.min-simbolo-add');
      btn.remove();
      sims = $('.columns.simbolos');
      sims.append("<div class=\"column col-max-simbolo\">\n  <div class=\"field\">\n    <div class=\"control\">\n      <input class=\"input max-simbolo\" type=\"text\" name=\"crear\" maxlength=\"1\" placeholder=\"Introduce el caracter máximo\"/>\n    </div>\n  </div>\n</div>");
      $('.input.min-simbolo').attr('placeholder', 'Introduce el carácter mínimo');
      $('.crear-AFN').append("<div class=\"field rango-btn\">\n  <div class=\"control\">\n    <a class=\"button is-primary btn-crear\">Agregar</a>\n  </div>\n</div>");
    } else {
      $('.col-max-simbolo').remove();
      $('.rango-btn').remove();
      field = $('.field.f-min-simbolo');
      $(field).addClass('has-addons');
      $(field).append("<div class=\"control min-simbolo-add\">\n  <a class=\"button is-primary btn-crear\">Agregar</a>\n</div>");
      $('.input.min-simbolo').attr('placeholder', 'Intoduce un carácter');
    }
    return agregarAFN();
  });
};

unirANFs = function() {
  return $('.btn-unir').on('click', function() {
    var regexes;
    regexes = $('.unir.apila .regex').map(function() {
      return $(this).text();
    }).get().join('|');
    return $('.unir.resultado').append(`<li class="panel-block">\n  <span class="regex">${regexes}</span>\n</li>`);
  });
};

concatenarAFNs = function() {
  return $('.btn-concatenar').on('click', function() {
    var regexes;
    regexes = $('.concatenar.apila .regex').map(function() {
      var regx;
      regx = $(this).text();
      if ('|¤┼?'.split('').some(function(closure) {
        return indexOf.call(regx, closure) >= 0;
      })) {
        return `(${regx})`;
      }
      return regx;
    }).get().join('');
    return $('.concatenar.resultado').append(`<li class="panel-block">\n  <span class="regex">${regexes}</span>\n</li>`);
  });
};

kleenAFNs = function() {
  return $('.btn-asterisco').on('click', function() {
    var j, len, regex, regexes, results;
    regexes = $('.asterisco.apila .regex').map(function() {
      var regx;
      regx = $(this).text();
      if (regx.length > 1) {
        return `(${regx})¤`;
      }
      return `${regx}¤`;
    }).get();
    results = [];
    for (j = 0, len = regexes.length; j < len; j += 1) {
      regex = regexes[j];
      results.push($('.asterisco.resultado').append(`<li class="panel-block">\n  <span class="regex">${regex}</span>\n</li>`));
    }
    return results;
  });
};

positivaAFNs = function() {
  return $('.btn-positiva').on('click', function() {
    var j, len, regex, regexes, results;
    regexes = $('.positiva.apila .regex').map(function() {
      var regx;
      regx = $(this).text();
      if (regx.length > 1) {
        return `(${regx})┼`;
      }
      return `${regx}┼`;
    }).get();
    results = [];
    for (j = 0, len = regexes.length; j < len; j += 1) {
      regex = regexes[j];
      results.push($('.positiva.resultado').append(`<li class="panel-block">\n  <span class="regex">${regex}</span>\n</li>`));
    }
    return results;
  });
};

interrogacionAFNs = function() {
  return $('.btn-interrogacion').on('click', function() {
    var j, len, regex, regexes, results;
    regexes = $('.interrogacion.apila .regex').map(function() {
      var regx;
      regx = $(this).text();
      if (regx.length > 1) {
        return `(${regx})?`;
      }
      return `${regx}?`;
    }).get();
    results = [];
    for (j = 0, len = regexes.length; j < len; j += 1) {
      regex = regexes[j];
      results.push($('.interrogacion.resultado').append(`<li class="panel-block">\n  <span class="regex">${regex}</span>\n</li>`));
    }
    return results;
  });
};

validaAFNs = function(...regexes) {
  var cadena, j, len, ref, regex, resultado, validaciones;
  ref = regexes, [...regexes] = ref, [cadena] = splice.call(regexes, -1);
  validaciones = [];
  for (j = 0, len = regexes.length; j < len; j += 1) {
    regex = regexes[j];
    validaciones.push((new AFN).fromRegex(regex).cadenaValida(cadena));
  }
  resultado = [];
  return validaciones.map(function(val) {
    if (val) {
      return '<span class="has-text-success">cadena valida :)</span>';
    }
    return '<span class="has-text-danger">cadena no valida :(</span>';
  });
};

cadenaValidaAFNs = function() {
  return $('.btn-validar').on('click', function() {
    var cadena, i, j, ref, regexes, resultados, results;
    regexes = $('.validar.apila .regex').map(function() {
      return $(this).text();
    }).get();
    cadena = $('.input.cadena-validar').val();
    resultados = validaAFNs(...regexes, cadena);
    results = [];
    for (i = j = 0, ref = regexes.length - 1; (0 <= ref ? j <= ref : j >= ref); i = 0 <= ref ? ++j : --j) {
      results.push($('.validar.resultado').append(`<li class="panel-block">\n  ${regexes[i]} con "${cadena}":&nbsp${resultados[i]}\n</li>`));
    }
    return results;
  });
};

ref = ['crear', 'unir', 'concatenar', 'asterisco', 'positiva', 'interrogacion', 'validar'];
for (j = 0, len = ref.length; j < len; j++) {
  s = ref[j];
  activaSeccion(s);
}

cambiarTipoAFN();

agregarAFN();

unirANFs();

concatenarAFNs();

kleenAFNs();

positivaAFNs();

interrogacionAFNs();

cadenaValidaAFNs();

adjustment = null;

$('.draggable-both').sortable({
  group: 'draggable-both',
  pullPlaceholder: false,
  onDrop: function($item, container, _super) {
    var $clonedItem;
    $clonedItem = $('<li/>').css({
      height: 0
    });
    $item.before($clonedItem);
    $clonedItem.animate({
      'height': $item.height()
    });
    return $item.animate($clonedItem.position(), function() {
      $clonedItem.detach();
      return _super($item, container);
    });
  },
  onDragStart: function($item, container, _super) {
    var offset, pointer;
    offset = $item.offset();
    pointer = container.rootGroup.pointer;
    adjustment = {
      left: pointer.left - offset.left,
      top: pointer.top - offset.top
    };
    return _super($item, container);
  },
  onDrag: function($item, position) {
    return $item.css({
      left: position.left - adjustment.left,
      top: position.top - adjustment.top
    });
  }
});

//Cracion de la tabla, agrega fila a una tabla
$('#add-row').on('click', function(e) {
  var table_body;
  e.preventDefault();
  table_body = $(e.target).data().table;
  if (table_body) {
    return add_row(table_body);
  }
});

add_row = function(table_body_element) {
  var $cloner, $new_row, $rows, $tbody, count, inputs;
  // Get some variables for the tbody and the row to clone.
  $tbody = $('#' + table_body_element);
  $rows = $($tbody.children('tr'));
  $cloner = $rows.eq(0);
  count = $rows.length;
  // Clone the row and get an array of the inputs.
  $new_row = $cloner.clone();
  inputs = $new_row.find('.dyn-input');
  // Change the name and id for each input.
  $.each(inputs, function(i, v) {
    var $input, $label, checked;
    $input = $(v);
    // Find the label for input and adjust it.
    $label = $new_row.find(`label[for='${$input.attr('id')}']`);
    $label.attr({
      'for': $input.attr('id').replace(/\[.*\]/, `[${count + 1}]`)
    });
    $input.attr({
      'name': $input.attr('name').replace(/\[.*\]/, `[${count + 1}]`),
      'id': $input.attr('id').replace(/\[.*\]/, `[${count + 1}]`)
    });
    // Remove values and checks.
    $input.val('');
    checked = $input.prop('checked');
    if (checked) {
      return $input.prop('checked', false);
    }
  });
  // Add the new row to the tbody.
  return $tbody.append($new_row);
};

//imprimirTabla->
//$( function (){
//var data = prutabla() #no se como chingados agarrar la salida de tabla()

//var table = arrayToTable(data, {
//thead: true,
//attrs: {class: 'tablaalv'}
//})

//$('body').append(table);

//});
